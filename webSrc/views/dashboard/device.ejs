<div class="device">
    <div id="device-overlay" class="overlay">
        <div id="device-confirm" class="confirm-box">
            <p class="confirm-message"></p>
            <div class="confirm-btn">
                <button id="device-yes" class="confirm-yes">Yes</button>
                <button id="device-no" class="confirm-no">No</button>
            </div>
        </div>
    </div>


    <div class="clock-box">
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"
            style="fill: #c7460f">
            <path
                d="M12 2C6.486 2 2 6.486 2 12s4.486 10 10 10 10-4.486 10-10S17.514 2 12 2zm3.293 14.707L11 12.414V6h2v5.586l3.707 3.707-1.414 1.414z">
            </path>
        </svg>
        <div class="timer" id="time"></div>
    </div>
    <div class="device-detail">
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">
            <path fill="#fff"
                d="M21 6h-2V3h-2v3H7V3H5v3H3a1 1 0 0 0-1 1v7a1 1 0 0 0 1 1h2v6h2v-6h10v6h2v-6h2a1 1 0 0 0 1-1V7a1 1 0 0 0-1-1zM4.42 13l2.857-5H9.58l-2.857 5H4.42zm7.857-5h2.303l-2.857 5H9.42l2.857-5zm5 0h2.303l-2.857 5H14.42l2.857-5z">
            </path>
        </svg>
        <p>Barrier</p>
        <div id="barrier" class="power <% if (barrier === 'On') { %>power-status--active<% } %>">
            <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="24" height="24"
                viewBox="0 0 483.336 483.336" style="--fill: currentColor">
                <path d="M241.668,0C108.198,0,0,108.198,0,241.668c0,133.471,108.198,241.668,241.668,241.668
                                        c133.469,0,241.668-108.197,241.668-241.668C483.336,108.198,375.137,0,241.668,0z M221.677,28.424h39.982v212.355h-39.982V28.424
                                        z M241.668,434.912c-106.556,0-193.245-86.688-193.245-193.244c0-73.207,40.583-139.277,105.911-172.428l18.091,35.655
                                        c-51.824,26.297-84.02,78.706-84.02,136.772c0,84.511,68.751,153.263,153.263,153.263c84.51,0,153.263-68.752,153.263-153.263
                                        c0-58.064-32.192-110.472-84.018-136.77l18.091-35.655c65.324,33.152,105.908,99.219,105.908,172.426
                                        C434.912,348.225,348.225,434.912,241.668,434.912z" />
            </svg>
            <div class="power-status">
                <%= barrier %>
            </div>
        </div>
    </div>
    <div class="device-detail">
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">
            <path fill="#fff"
                d="m17.284 3.707 1.412-1.416 3.01 3-1.413 1.417zm-10.586 0-2.99 2.999L2.29 5.294l2.99-3zM12 4c-4.879 0-9 4.121-9 9s4.121 9 9 9 9-4.121 9-9-4.121-9-9-9zm1 14h-2v-2h2v2zm0-4h-2V8h2v6z">
            </path>
        </svg>
        <p>Siren</p>
        <div id="siren" class="power <% if (siren === 'On') { %>power-status--active<% } %>">
            <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="24" height="24"
                viewBox="0 0 483.336 483.336" style="--fill: currentColor">
                <path d="M241.668,0C108.198,0,0,108.198,0,241.668c0,133.471,108.198,241.668,241.668,241.668
                                        c133.469,0,241.668-108.197,241.668-241.668C483.336,108.198,375.137,0,241.668,0z M221.677,28.424h39.982v212.355h-39.982V28.424
                                        z M241.668,434.912c-106.556,0-193.245-86.688-193.245-193.244c0-73.207,40.583-139.277,105.911-172.428l18.091,35.655
                                        c-51.824,26.297-84.02,78.706-84.02,136.772c0,84.511,68.751,153.263,153.263,153.263c84.51,0,153.263-68.752,153.263-153.263
                                        c0-58.064-32.192-110.472-84.018-136.77l18.091-35.655c65.324,33.152,105.908,99.219,105.908,172.426
                                        C434.912,348.225,348.225,434.912,241.668,434.912z" />
            </svg>
            <div class="power-status">
                <%= siren %>
            </div>
        </div>
    </div>
</div>
<script type="module">
    import { database, ref, update } from "./js/firebase-config.js";
    const device_overlay = document.getElementById('device-overlay');
    const device_confirmYesButton = document.getElementById('device-yes');
    const device_confirmNoButton = document.getElementById('device-no');
    const barrierElement = document.getElementById('barrier');
    const sirenElement = document.getElementById('siren');

    let selectedDevice = null;
    function getNewDeviceStatus(device) {
        const currentStatus = device.querySelector('.power-status').textContent;
        return currentStatus.includes('On') ? 'Off' : 'On';
    }
    function updateConfirmMessage(device, newStatus) {
        const confirmMessage = document.querySelector('.confirm-message');
        confirmMessage.textContent = `Are you sure you want to turn ${newStatus.toLowerCase()} the device?`;
    }
    function showDeviceOverlay(device) {
        selectedDevice = device;
        device_overlay.style.display = 'flex';
        document.body.style.overflow = 'hidden';

        const newDeviceStatus = getNewDeviceStatus(device);
        updateConfirmMessage(device, newDeviceStatus);
    }
    function hideDeviceOverlay() {
        device_overlay.style.display = 'none';
        document.body.style.overflow = 'auto';
    }

    device_confirmYesButton.addEventListener('click', async () => {
        hideDeviceOverlay();
        const newDeviceStatus = getNewDeviceStatus(selectedDevice);
        let deviceRef;
        if (selectedDevice.id === 'barrier') {
            deviceRef = ref(database, 'BARRIER');
        } else if (selectedDevice.id === 'siren') {
            deviceRef = ref(database, 'SIREN');
        }

        try {
            await update(deviceRef, { state: newDeviceStatus === 'On' });
            selectedDevice.querySelector('.power-status').textContent = newDeviceStatus;
            selectedDevice.classList.toggle('power-status--active');
        } catch (error) {
            console.error(`Failed to update ${selectedDevice.id} status`, error);
        }
    });

    device_confirmNoButton.addEventListener('click', () => {
        hideDeviceOverlay();
    });

    barrierElement.addEventListener('click', () => showDeviceOverlay(barrierElement));
    sirenElement.addEventListener('click', () => showDeviceOverlay(sirenElement));

    document.querySelectorAll('.device-detail .power').forEach((powerButton) => {
        powerButton.addEventListener('click', (event) => {
            const device = event.target.closest('.device-detail').querySelector('.power');
            showDeviceOverlay(device);
        });
    });

    // update time
    function updateTime() {
        const now = new Date();
        const hours = String(now.getHours()).padStart(2, '0');
        const minutes = String(now.getMinutes()).padStart(2, '0');
        const seconds = String(now.getSeconds()).padStart(2, '0');
        document.getElementById('time').textContent = `${hours}:${minutes}:${seconds}`;
    }
    setInterval(updateTime, 1000);
    updateTime();
</script>